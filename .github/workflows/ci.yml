name: CI Pipeline

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest  # GitHub Actions에서 제공하는 가상 머신

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # 코드 가져오기

      - name: Set up JDK 17
        uses: actions/setup-java@v3  # JDK 17 설치
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Create .env file
        run: |
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" > .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

#      - name: Set up Docker Network
#        run: docker network create app_network || true

      - name: Set up Docker Compose
        run: |
          docker-compose up -d database redis

      - name: Wait for DB to be ready
        run: |
          until docker exec $(docker-compose ps -q database) mysqladmin ping -h "localhost" -u root -p${DB_PASSWORD} --silent; do
            echo "Waiting for database connection..."
            sleep 2
          done

#      - name: Run tests
#        run: ./gradlew test --info  # 테스트 실행

      - name: Build app
        run: ./gradlew build -x test

      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/market_normalization:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/market_normalization:latest


      - name: Tear down Docker Compose
        if: always()
        run: docker-compose -f docker-compose.yml down --volumes

